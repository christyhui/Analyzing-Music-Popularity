setwd("C:/Users/Florence.000/Desktop/Projects/R/Nintendo 3DS Games")
knitr::opts_chunk$set(echo = TRUE)
ntds = read.csv("nintendo3ds.csv")
sum(is.na(ntds))
dim(ntds)
names(ntds)
View(ntds)
sum(is.na(ntds$metacritic))
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
es = c()
es.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(es, sum(is.na(ntds[, i]))) # find number of NAs
if (which(i ==0)) { # find which columns has NAs
es.indices = append(navals.indices, i)
}
}
es = c()
es.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(es, sum(is.na(ntds[, i]))) # find number of NAs
if (which(i == "")) { # find which columns has NAs
es.indices = append(navals.indices, i)
}
}
ntds = read.csv("nintendo3ds.csv")
sum(is.na(ntds))
dim(ntds)
names(ntds)
sum(is.na(ntds$metacritic))
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
ntds = read.csv("nintendo3ds.csv")
sum(is.na(ntds))
dim(ntds)
names(ntds)
sum(is.na(ntds$metacritic))
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
which(ntds == "")
sum(which(ntds == ""))
length(which(ntds == ""))
which(ntds == "")
ntds[which(ntds == ""),]
which(ntds == "")
length(which(ntds == ""))
View(ntds[which(ntds == ""),])
View(ntds)
is_empty(ntds)
is.empty.model(ntds)
install.packages("sjmisc")
library(sjmisc)
is_empty(ntds)
ntds[which(ntds == ""),]
which(ntds == "")
is_empty(ntds[5594])
is_empty(ntds[5594,])
is_empty(ntds[5595,])
is_empty(ntds[5593,])
is_empty(ntds[55,])
is_empty(ntds[5595,])
is_empty(ntds[5596,])
is_empty(ntds[6000,])
ntds[6000,]
View(ntds[6000,])
ntds[5]
ntds[5,]
View(ntds[5,])
is_empty(ntds[5, 3])
which(ntds == "")
ntds[5594]
ntds[5594,]
ntds[5594]
View(ntds)
dim(ntds)
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty[i, j] == TRUE) {
print(i, \n)
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty[i, j] == TRUE) {
print(i + \n)
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty[i, j] == TRUE) {
print(c(i, \n))
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty[i, j] == TRUE) {
print(c(i, "\n"))
print(c(j, "\n"))
}
}
}
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(c(i, "\n"))
print(c(j, "\n"))
}
}
}
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(c(i, "\n"))
print(c(j, "\n"))
}
}
}
is_empty(ntds[3, 1])
is_empty(ntds["35", "tags"])
is_empty(ntds["36", "tags"])
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
is_empty(ntds[5, 13])
is_empty(ntds[5, 14])
is_empty(ntds[5, 112])
is_empty(ntds[5, 12])
is_empty(ntds[35, 13])
is_empty(ntds[35, 13])
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[j, i]) == TRUE) {
print(i)
print(j)
}
}
}
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
nrow(ntds)
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
for (i in nrow(ntds)) {
for (j in ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(i)
print(j)
}
}
}
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
print(c("i = ", i))
print(c("j = ", j))
}
}
}
ntds[16, 15]
names(ntds)[15]
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
ntds[i, j] == NA
}
}
}
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
ntds[i, j] = NA
}
}
}
sum(is.na(ntds))
ntds = read.csv("nintendo3ds.csv")
sum(is.na(ntds))
dim(ntds)
names(ntds)
sum(is.na(ntds$metacritic))
ntds = read.csv("nintendo3ds.csv")
sum(is.na(ntds))
dim(ntds)
names(ntds)
ntds = read.csv("nintendo3ds.csv")
dim(ntds)
names(ntds)
sum(is.na(ntds))
sum(is.na(ntds$metacritic))
is_empty(ntds, first.only = FALSE)
is_empty(ntds$tags, first.only = FALSE)
sum(is_empty(ntds$tags, first.only = FALSE))
sum(is_empty(ntds, first.only = FALSE))
sum(is_empty(ntds$tags, first.only = FALSE))
(is_empty(ntds$tags, first.only = FALSE))
sum(is_empty(ntds$tags, first.only = FALSE))
sum(is_empty(ntds$genre, first.only = FALSE))
sum(is_empty(ntds$genres, first.only = FALSE))
library(sjmisc)
sum(is_empty(ntds$tags, first.only = FALSE))
sum(is_empty(ntds$genres, first.only = FALSE))
724+1328
2052+1542
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
ntds[i, j] = NA
}
}
}
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
library(sjmisc)
sum(is_empty(ntds$tags, first.only = FALSE))
ntds = read.csv("nintendo3ds.csv")
dim(ntds)
names(ntds)
library(sjmisc)
sum(is_empty(ntds$tags, first.only = FALSE))
names[, navals.indices]
names[, c(navals.indices)]
navals.indices
c(navals.indices)
typeof(navals.indices)
names[, c(4, 10, 13, 15)]
names[, c(4, 10, 13, 15)]
names[c(4, 10, 13, 15)]
names[4]
names(ntds)[c(4, 10, 13, 15)]
names(ntds)[navals.indices]
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
return(navals)
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
navals
navals.indices
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
knitr::opts_chunk$set(echo = TRUE)
ntds = read.csv("nintendo3ds.csv")
dim(ntds)
names(ntds)
sum(is.na(ntds))
sum(is.na(ntds$metacritic))
library(sjmisc)
sum(is_empty(ntds$tags, first.only = FALSE))
for (i in 1:nrow(ntds)) {
for (j in 1:ncol(ntds)) {
if (is_empty(ntds[i, j]) == TRUE) {
ntds[i, j] = NA
}
}
}
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
names(ntds)[navals.indices]
navals = c()
navals.indices = c()
for (i in 1:ncol(ntds)) {
navals = append(navals, sum(is.na(ntds[, i]))) # find number of NAs
if ((sum(is.na(ntds[, i]))) > 0) { # find which columns has NAs
navals.indices = append(navals.indices, i)
}
}
print(navals)
print(navals.indices)
names(ntds)[navals.indices]
rm(list = ls())
setwd("C:/Users/Florence.000/Desktop/Projects/R/Spotify")
